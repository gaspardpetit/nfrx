name: Windows Build
on:
  push:
    branches: [ main ]
  release:
    types: [ published ]

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: windows-latest
    env:
      PFX_B64: ${{ secrets.WIN_CODE_SIGN_PFX_B64 }}   # <- expose once at job level
      PFX_PASS: ${{ secrets.WIN_CODE_SIGN_PFX_PASS }}
    steps:
      - uses: actions/checkout@v4
      - name: Compute version metadata
        id: meta
        shell: bash
        run: |
          SHA=$(git rev-parse --short HEAD)
          DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            VERSION="${GITHUB_REF_NAME}"
            DESCRIBE="${GITHUB_REF_NAME}"
          else
            DESCRIBE="$(git describe --tags --always --dirty)"
            VERSION="${DESCRIBE}"
          fi
          echo "version=${VERSION}"   >> $GITHUB_OUTPUT
          echo "describe=${DESCRIBE}" >> $GITHUB_OUTPUT
          echo "sha=${SHA}"           >> $GITHUB_OUTPUT
          echo "date=${DATE}"         >> $GITHUB_OUTPUT
      - uses: actions/setup-go@v5
        with:
          go-version: '1.23'
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Build worker
        run: |
          go build -trimpath -o cmd/nfrx-llm/nfrx-llm.exe -ldflags "-s -w -X main.version=${{ steps.meta.outputs.version }} -X main.buildSHA=${{ steps.meta.outputs.sha }} -X main.buildDate=${{ steps.meta.outputs.date }}" ./cmd/nfrx-llm
      - name: Build .NET projects
        run: dotnet build desktop/windows/Nfrx.Windows.sln -c Release
      - name: Install WiX
        shell: pwsh
        run: |
          dotnet tool install --global wix
          echo "$env:USERPROFILE\.dotnet\tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: Build MSI
        run: |
          New-Item -ItemType Directory -Path build | Out-Null
          wix build desktop/windows/Installer/Product.wxs `
            -d:WorkerExe="cmd\nfrx-llm\nfrx-llm.exe" `
            -d:ServiceExe="desktop\windows\WindowsService\bin\Release\net8.0-windows\WindowsService.exe" `
            -d:TrayExe="desktop\windows\TrayApp\bin\Release\net8.0-windows\TrayApp.exe" `
            -d:DefaultConfig="desktop\windows\Installer\worker.yaml" `
            -out build\nfrx.msi

      - name: Restore PFX from secret
        if: ${{ env.PFX_B64 != '' && github.event_name != 'pull_request' }}
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path build -ErrorAction SilentlyContinue | Out-Null
          [IO.File]::WriteAllBytes("build/codesign.pfx", [Convert]::FromBase64String($env:PFX_B64))

      - name: Code Sign (EXEs & MSI)
        if: ${{ env.PFX_B64 != '' && github.event_name != 'pull_request' }}
        shell: cmd
        run: |
          signtool sign /f build\codesign.pfx /p %PFX_PASS% /fd SHA256 /tr http://timestamp.digicert.com /td SHA256 desktop\windows\TrayApp\bin\Release\net8.0-windows\TrayApp.exe
          signtool sign /f build\codesign.pfx /p %PFX_PASS% /fd SHA256 /tr http://timestamp.digicert.com /td SHA256 desktop\windows\WindowsService\bin\Release\net8.0-windows\WindowsService.exe
          signtool sign /f build\codesign.pfx /p %PFX_PASS% /fd SHA256 /tr http://timestamp.digicert.com /td SHA256 cmd\nfrx-llm\nfrx-llm.exe
          signtool sign /f build\codesign.pfx /p %PFX_PASS% /fd SHA256 /tr http://timestamp.digicert.com /td SHA256 build\nfrx.msi
      
      - name: Install cosign
        if: ${{ github.event_name != 'pull_request' }}
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 # v3.5.0
        with:
          cosign-release: 'v2.2.4'
      
      - name: Cosign sign artifacts (keyless)
        if: ${{ github.event_name != 'pull_request' }}
        shell: pwsh
        env:
          COSIGN_YES: "true"   # auto-approve keyless flow
        run: |
          $files = @(
            "build/nfrx.msi",
            "desktop/windows/TrayApp/bin/Release/net8.0-windows/TrayApp.exe",
            "desktop/windows/WindowsService/bin/Release/net8.0-windows/WindowsService.exe",
            "cmd/nfrx-llm/nfrx-llm.exe"
          )
          foreach ($f in $files) {
            if (Test-Path $f) {
              cosign sign-blob $f --output-signature "$f.sig" --output-certificate "$f.pem"
            }
          }


      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: nfrx-Windows
          path: |
            build\nfrx.msi
            build\nfrx.msi.sig
            build\nfrx.msi.pem
            desktop\windows\TrayApp\bin\Release\net8.0-windows\TrayApp.exe
            desktop\windows\TrayApp\bin\Release\net8.0-windows\TrayApp.exe.sig
            desktop\windows\TrayApp\bin\Release\net8.0-windows\TrayApp.exe.pem
            desktop\windows\WindowsService\bin\Release\net8.0-windows\WindowsService.exe
            desktop\windows\WindowsService\bin\Release\net8.0-windows\WindowsService.exe.sig
            desktop\windows\WindowsService\bin\Release\net8.0-windows\WindowsService.exe.pem
            cmd\nfrx-llm\nfrx-llm.exe
            cmd\nfrx-llm\nfrx-llm.exe.sig
            cmd\nfrx-llm\nfrx-llm.exe.pem
