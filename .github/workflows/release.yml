name: release

on:
  push:
    tags: [ 'v*' ]

permissions:
  contents: write

env:
  CGO_ENABLED: 0

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v4

      - name: Compute version metadata
        id: meta
        shell: bash
        run: |
          SHA=$(git rev-parse --short HEAD)
          DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            VERSION="${GITHUB_REF_NAME}"
            DESCRIBE="${GITHUB_REF_NAME}"
          else
            DESCRIBE="$(git describe --tags --always --dirty)"
            VERSION="${DESCRIBE}"
          fi
          echo "version=${VERSION}"   >> $GITHUB_OUTPUT
          echo "describe=${DESCRIBE}" >> $GITHUB_OUTPUT
          echo "sha=${SHA}"           >> $GITHUB_OUTPUT
          echo "date=${DATE}"         >> $GITHUB_OUTPUT

      - uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          LDFLAGS: >-
            -s -w -X main.version=${{ steps.meta.outputs.version }} -X main.buildSHA=${{ steps.meta.outputs.sha }} -X main.buildDate=${{ steps.meta.outputs.date }}
        run: |
          EXT=""
          if [ "$GOOS" = "windows" ]; then EXT=".exe"; fi
          mkdir -p dist
          go build -ldflags "$LDFLAGS" -o dist/nfrx${EXT} ./nfrx-server/cmd/nfrx
          go build -ldflags "$LDFLAGS" -o dist/nfrx-llm${EXT} ./nfrx-plugins-llm/cmd/nfrx-llm
          go build -ldflags "$LDFLAGS" -o dist/nfrx-mcp${EXT} ./nfrx-plugins-mcp/cmd/nfrx-mcp
      - name: Package
        id: pkg
        shell: bash
        run: |
          OS=${{ matrix.goos }}
          ARCH=${{ matrix.goarch }}
          NAME="nfrx_${OS}_${ARCH}_${{ steps.meta.outputs.version }}"
          mkdir -p "pkg/$NAME"
          cp -v LICENSE README.md dist/* "pkg/$NAME"/
          echo "dir=pkg/$NAME" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.pkg.outputs.name }}
          path: ${{ steps.pkg.outputs.dir }}
 
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dl
      - name: Repack & checksums
        shell: bash
        run: |
          mkdir -p out
          for d in dl/*; do
            base=$(basename "$d")
            if [[ "$base" == *windows* ]]; then
              (cd dl && zip -r -9 "../out/${base}.zip" "$base")
            else
              tar -C dl -czf "out/${base}.tar.gz" "$base"
            fi
          done
          (cd out && sha256sum * > SHA256SUMS.txt)
      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            out/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

