permissions:
  contents: read
name: snapshot

on:
  push:
    branches: [ "main" ]

env:
  CGO_ENABLED: 0

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v4

      - name: Compute version metadata
        id: meta
        shell: bash
        run: |
          SHA=$(git rev-parse --short HEAD)
          DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            VERSION="${GITHUB_REF_NAME}"
            DESCRIBE="${GITHUB_REF_NAME}"
          else
            DESCRIBE="$(git describe --tags --always --dirty)"
            VERSION="${DESCRIBE}"
          fi
          echo "version=${VERSION}"   >> $GITHUB_OUTPUT
          echo "describe=${DESCRIBE}" >> $GITHUB_OUTPUT
          echo "sha=${SHA}"           >> $GITHUB_OUTPUT
          echo "date=${DATE}"         >> $GITHUB_OUTPUT

      - uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Build
        shell: bash
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          LDFLAGS="-s -w -X main.version='${{ steps.meta.outputs.version }}' -X main.buildSHA='${{ steps.meta.outputs.sha }}' -X main.buildDate='${{ steps.meta.outputs.date }}'"
          EXT=""
          [ "$GOOS" = "windows" ] && EXT=".exe"
          mkdir -p dist
          go build -trimpath -ldflags "$LDFLAGS" -o "dist/nfrx${EXT}" ./server/cmd/nfrx
          go build -trimpath -ldflags "$LDFLAGS" -o "dist/nfrx-llm${EXT}" ./modules/llm/agent/cmd/nfrx-llm
          go build -trimpath -ldflags "$LDFLAGS" -o "dist/nfrx-mcp${EXT}" ./modules/mcp/agent/cmd/nfrx-mcp
      
      - name: Package
        id: pkg
        shell: bash
        run: |
          OS=${{ matrix.goos }}
          ARCH=${{ matrix.goarch }}
          NAME="nfrx_${OS}_${ARCH}_${{ steps.meta.outputs.describe }}"
          mkdir -p "pkg/$NAME"
          cp -v LICENSE README.md dist/* "pkg/$NAME"/
          echo "file=pkg/$NAME" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.pkg.outputs.name }}
          path: ${{ steps.pkg.outputs.file }}
