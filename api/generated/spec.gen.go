// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RW32vbOhT+V8x56gXf2Lm9jOK3tpStbGOBQPtQwlCk01itLWnSSVov+H8fktw4WbL+",
	"IO1g7MlY54e+73xHOloC17XRChU5KJbgkM+tpGbMS6wxLJ0gs2iP51QGh2CAAqZhGVKgxvj/kshA27Yp",
	"SHWtvStJqrylqljNjNZVcjw6hxQWaJ3UCgoYDvJBDm0K2qBiRkIBh4N8cAgpGEZl2D5jRmaOGKH/myH5",
	"jzZoGUmtzgUU8B7p2Mhx8EnBojNauQj+vzz3H64VoQqhzJhK8hCc3TgPoyPFglUI6U2sGlm/CUmfh+wc",
	"V0T19AY5RaoCHbfSUKQTEfj1hzJCcbVZwKtJO0nBzeua2SZCTxzaBdrEraJ7ypkji6x+DvNx9HySP+E9",
	"ZbhARf/2yfsCdCQdWalmu0ie+dCkC30R14jwF3QXw4yXjDLfjhX6vQJ+o90O2iPtPO+L4WnJ6HQtwrP/",
	"NkdHJ1o0bym830ZaFNGl/Y1dl+6t4JePL9PNFzlZ0yU5MFbfN/9siIf1FIWQavYc2c56579Asb0F6Mu1",
	"s/S1Fli5J+6Ii+Hn6LYncbNGdwmCUViVhLXbNnOLjHzJl3Ctbc0ICpCK3v3fjw2pCGdo/RCQYkf7pg91",
	"3Gm6Uyi+Tptdbb+u+JXPvcqUrnCtZZhs6bZaYNayZitjoD55A7U/SUdJp+m2zNlSivaZWp+LMEgtq5HQ",
	"urCz9JD8cIUUFAuTPNRm83ikj9wnk1ftoD+6RfYX28//IGwv9Z22t2hdxrVSHatHtL6M3qed80/aDPNh",
	"OKabz5Q7SbyUapaMrCbNdddoPaqYNOkQJAeXOB1rfovUXTwlsorK749B+9C5vGqz+DfD3D0tZef3EsFW",
	"3CPwhJfIb2NAfLDE4zO3VffWLbKs0pxVpXZUHOVHObST9kcAAAD//7Ja/w5PCwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
